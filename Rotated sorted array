def pivot_index(A):
    
    n = len(A)
    l = 0
    r = n-1
    pivot = n

    while l<=r:
        
        mid = (l+r)//2

        if A[mid]>=A[0]:
            l = mid+1
        
        elif A[mid]<A[0]:
            pivot = mid
            #save the index and try for better posistion
            r = mid-1
        
    return pivot

class Solution:
    # @param A : tuple of integers
    # @param B : integer
    # @return an integer
    def search(self, A, B):
        
        pivot = pivot_index(A)
        n = len(A)

        if B >= A[0]:
            l = 0
            r = pivot-1

        else:
            l = pivot 
            r = n-1

        while l<=r:
            mid = (l+r)//2

            if A[mid]<B:
                l = mid+1

            elif A[mid]>B:
                r = mid-1

            else:
                return mid

        return -1
